<html>
    <style>
        *{
    margin:0;
    padding:0;
    box-sizing: border-box;
    font-family: 'Times New Roman', Times, serif;
}
body{
    background-color: darkgray;
    color:aliceblue;
    display: flex;
    justify-content: center;
    align-items: center;
    
}
.container{
    display: flex;
    flex-direction:column;
    background-color: black;
    padding:20px;
    width: 50%;
}
.user-container{
    display:flex;
    flex-direction: column;
    justify-content: start;
    
}
.user-input-container{
    padding:0.4rem;
}
#search-button{
    padding: 0.3emrem;
}
.circle{
    width: 120px;
    height:120px;
    border-radius: 50%;
    border:4px solid green;
    position:relative;
    display:flex;
    align-items: center;
    justify-content: center;
    font-size: 1 rem;
    color:aliceblue;
    background: conic-gradient(rgb(102, 163, 102) var(--progressdegree,40%),rgb(7, 111, 7) 40%);
}
.circle span{
    position: relative;
    z-index: 2;
}
.progress{
    display:flex;
    flex-direction:row;
    gap:10px;
}
    </style>
    <div class="container">
    <h1>LeetMetric</h1>
    <div class="user-container">
        <p>Enter your username below </p>
        <div class="user-input-container">
            <input type="text" id="username" placeholder="enter your username here">
            <button id="search-button">Search</button>
        </div>
    </div>
    <div class="stats">
        <div class="progress">
            <div class="progress-item">
                <div class="easy-progress circle">
                    <span id ="easy-label"></span>
                    Easy
                </div>
            </div>
            <div class="progress-item">
                <div class="medium-progress circle">
                    <span id ="medium-label"></span>
                    Medium
                </div>
            </div>
            <div class="progress-item">
                <div class="hard-progress circle">
                    <span id ="hard-label"></span>
                    Hard
                </div>
            </div>

        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded",function()){
        const searchButton=document.getElementbyId("search-button");
        const userNameInput=document.getElementbyId("username");
        const statsContainer=document.gqueryselector("stats");
        const 
        function validateUsername(username){
            if(username.trim()===''){
                alert("username should not be empty!");
                return false;
            }
            const regex=/^[a-zA-Z][a-zA-Z0-9_-]{4,14}$/;   
            const isMatching=regex.test(username);
            if(!isMatching){
                alert("invalid username!");
            }
            return isMatching;      
        }
        async function fetchUserDetails(username) {

try{
    searchButton.textContent = "Searching...";
    searchButton.disabled = true;
    //statsContainer.classList.add("hidden");

    // const response = await fetch(url);
    const proxyUrl = 'https://cors-anywhere.herokuapp.com/' 
    const targetUrl = 'https://leetcode.com/graphql/';
    
    const myHeaders = new Headers();
    myHeaders.append("content-type", "application/json");

    const graphql = JSON.stringify({
        query: "\n    query userSessionProgress($username: String!) {\n  allQuestionsCount {\n    difficulty\n    count\n  }\n  matchedUser(username: $username) {\n    submitStats {\n      acSubmissionNum {\n        difficulty\n        count\n        submissions\n      }\n      totalSubmissionNum {\n        difficulty\n        count\n        submissions\n      }\n    }\n  }\n}\n    ",
        variables: { "username": `${username}` }
    })
    const requestOptions = {
        method: "POST",
        headers: myHeaders,
        body: graphql,
    };

    const response = await fetch(proxyUrl+targetUrl, requestOptions);
    if(!response.ok) {
        throw new Error("Unable to fetch the User details");
    }
    const parsedData = await response.json();
    console.log("Logging data: ", parsedData) ;

    displayUserData(parsedData);
}
catch(error) {
    statsContainer.innerHTML = `<p>${error.message}</p>`
}
finally {
    searchButton.textContent = "Search";
    searchButton.disabled = false;
}
}
function updateuserprogress(solved,total,label,circle){
    const progressdegree=(solved/total)*100;
    circle.style.setProperty("--progress-degree",'${progressdegree}%');
    label.textContent='${solved}/${total}';
}
function displayUserData(parsedData) {
        const totalQues = parsedData.data.allQuestionsCount[0].count;
        const totalEasyQues = parsedData.data.allQuestionsCount[1].count;
        const totalMediumQues = parsedData.data.allQuestionsCount[2].count;
        const totalHardQues = parsedData.data.allQuestionsCount[3].count;

        const solvedTotalQues = parsedData.data.matchedUser.submitStats.acSubmissionNum[0].count;
        const solvedTotalEasyQues = parsedData.data.matchedUser.submitStats.acSubmissionNum[1].count;
        const solvedTotalMediumQues = parsedData.data.matchedUser.submitStats.acSubmissionNum[2].count;
        const solvedTotalHardQues = parsedData.data.matchedUser.submitStats.acSubmissionNum[3].count;

        updateProgress(solvedTotalEasyQues, totalEasyQues, easyLabel, easyProgressCircle);
        updateProgress(solvedTotalMediumQues, totalMediumQues, mediumLabel, mediumProgressCircle);
        updateProgress(solvedTotalHardQues, totalHardQues, hardLabel, hardProgressCircle);

        searchButton.addEventListener('click',function()){
            const username=userNameInput.value;
            if(validateUsername(username)){
                fetchUserDetails(username);
            }

        }
            
        

    }
    }
</script>
</html>
